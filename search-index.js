var searchIndex = new Map(JSON.parse('[\
["ladderz",{"doc":"ladderz","t":"CCHHHHHHHHHHHHH","n":["dsa","prealgebra","contains_duplicate","is_anagram","is_anagram2","two_sum","get_factor_pairs","get_factors","get_multiples_in_range","get_prime_factorization","get_primes_in_range","is_composite","is_factor","is_multiple","is_prime"],"q":[[0,"ladderz"],[2,"ladderz::dsa"],[6,"ladderz::prealgebra"],[15,"alloc::vec"],[16,"alloc::string"],[17,"std::collections::hash::set"],[18,"std::collections::hash::map"]],"d":["Various data structures and algorithms implementations.","Various pre-algebra implementations including factor …","","","","","Finds all factor pairs for a positive integer <code>n</code>.","Finds all factors of a positive integer <code>n</code>.","Finds all the multiples of a positive integer <code>n</code> starting …","Returns the prime factorization of a positive integer <code>n</code>.","Returns all prime numbers in the range [start, end].","Checks if a positive integer <code>n</code> is a composite number.","Checks if a positive integer <code>x</code> is a factor of another …","Checks if a positive integer <code>x</code> is a multiple of another …","Checks if a positive integer <code>n</code> is a prime number."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[[2,[1]]],3],[[4,4],3],[[4,4],3],[[[2,[1]],1],[[2,[1]]]],[5,[[7,[[6,[5,5]]]]]],[5,[[7,[5]]]],[[5,5,5],[[7,[5]]]],[5,[[8,[5,5]]]],[[5,5],[[7,[5]]]],[5,3],[[5,5],3],[[5,5],3],[5,3]],"c":[],"p":[[1,"i32"],[5,"Vec",15],[1,"bool"],[5,"String",16],[1,"u32"],[1,"tuple"],[5,"HashSet",17],[5,"HashMap",18]],"b":[]}],\
["lz",{"doc":"lz","t":"FPPGNNNNNNNNNNCNNNNNNNNNNHCONNNNNNNNNNOOPGPPNNNNNNNNNHNNNNNOOOOOOOOPPPPPPPGPPNNNNNNNNNHNNNNNOOOOOOOOOOOOOOOOOOOOOOO","n":["Cli","Dsa","Prealgebra","Subjects","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","dsa","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","prealgebra","subject","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","function","function","ContainsDuplicate","Dsa","IsAnagram","TwoSum","augment_subcommands","augment_subcommands_for_update","borrow","borrow_mut","from","from_arg_matches","from_arg_matches_mut","has_subcommand","into","match_dsa","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","a","b","n","nums","raw","raw","raw","target","FactorPairs","Factors","IsComposite","IsFactor","IsMultiple","IsPrime","MultiplesInRange","Prealgebra","PrimeFactorization","PrimesInRange","augment_subcommands","augment_subcommands_for_update","borrow","borrow_mut","from","from_arg_matches","from_arg_matches_mut","has_subcommand","into","match_prealgebra","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","lower_bound","lower_bound","m","m","n","n","n","n","n","n","n","n","raw","raw","raw","raw","raw","raw","raw","raw","raw","upper_bound","upper_bound"],"q":[[0,"lz"],[38,"lz::Subjects"],[40,"lz::dsa"],[59,"lz::dsa::Dsa"],[67,"lz::prealgebra"],[92,"lz::prealgebra::Prealgebra"],[115,"clap_builder::builder::command"],[116,"clap_builder::parser::matches::arg_matches"],[117,"clap_builder"],[118,"core::result"],[119,"clap_builder::util::id"],[120,"core::option"],[121,"core::any"]],"d":["","","","The subjects that can be used.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","The function (command) to run.","","Returns true or false based on whether the vector has a …","","Returns true or false based on whether string a is an …","Returns the indices of two numbers in a vector that sum to …","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","The first string to compare against.","The second string to compare against.","The vector of numbers to detect whether it has a duplicate.","The vector of numbers as a comma-delimited string.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","The number that two numbers from nums must sum to.","Finds all factor pairs for a positive integer.","Finds all factors for a positive integer.","Determines if a positive integer is composite.","Determines if a positive integer is a factor of another …","Determines if a positive integer is a multiple of another …","Determines if a positive integer is prime.","Finds all multiples of a positive integer in a given range.","","Finds the prime factorization of a positive integer.","Finds all primes in a given range.","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","The lower bound of the range to find multiples in.","The lower bound of the range to find primes in.","The positive integer to determine if it is a multiple.","The positive integer to determine if it is a factor.","The positive integer to find factor pairs for.","The positive integer to find factors for.","The positive integer to find multiples for.","The positive integer to find the prime factorization of.","The positive integer to determine if it is composite.","The positive integer to determine if it is prime.","The positive integer to determine if it is a factor.","The positive integer to determine if it is a multiple.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","Whether or not to return the raw output.","The upper bound of the range to find multiples in.","The upper bound of the range to find primes in."],"i":[0,6,6,0,3,3,6,6,3,6,3,6,3,3,0,3,6,3,6,3,6,3,6,3,6,0,0,3,3,6,3,6,3,6,3,6,3,6,15,16,13,0,13,13,13,13,13,13,13,13,13,13,13,0,13,13,13,13,13,17,17,18,19,18,17,19,19,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,20,21,22,23,24,25,20,26,27,28,22,23,24,25,20,21,26,27,28,22,23,20,21],"f":[0,0,0,0,[1,1],[1,1],[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],0,[-1,-1,[]],[-1,-1,[]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[[],[[8,[7]]]],[9,10],[-1,-2,[],[]],[-1,-2,[],[]],[[],11],0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[3,2],[[5,[11,4]]]],[[6,2],[[5,[11,4]]]],[[3,2],[[5,[11,4]]]],[[6,2],[[5,[11,4]]]],0,0,0,0,0,0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[2,[[5,[13,4]]]],[2,[[5,[13,4]]]],[9,10],[-1,-2,[],[]],[[[8,[13]]],11],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[[13,2],[[5,[11,4]]]],[[13,2],[[5,[11,4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[2,[[5,[14,4]]]],[2,[[5,[14,4]]]],[9,10],[-1,-2,[],[]],[[[8,[14]]],11],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[[14,2],[[5,[11,4]]]],[[14,2],[[5,[11,4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[5,"Command",115],[5,"ArgMatches",116],[5,"Cli",0],[8,"Error",117],[6,"Result",118],[6,"Subjects",0],[5,"Id",119],[6,"Option",120],[1,"str"],[1,"bool"],[1,"tuple"],[5,"TypeId",121],[6,"Dsa",40],[6,"Prealgebra",67],[15,"Prealgebra",38],[15,"Dsa",38],[15,"IsAnagram",59],[15,"ContainsDuplicate",59],[15,"TwoSum",59],[15,"MultiplesInRange",92],[15,"PrimesInRange",92],[15,"IsFactor",92],[15,"IsMultiple",92],[15,"FactorPairs",92],[15,"Factors",92],[15,"PrimeFactorization",92],[15,"IsComposite",92],[15,"IsPrime",92]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
